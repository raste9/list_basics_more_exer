input_times = input().split()

half = len(input_times) // 2

first_half_car = input_times[0:half] #[start : end]
int_first_half_car = [int(k) for k in first_half_car]

second_car_half = input_times[-1: half: -1] #[start : end: by step]
int_second_car_half = [int(m) for m in second_car_half]

time_first_car = 0
time_second_car = 0

for i in int_first_half_car:
    time_first_car += i
    if i == 0:
        time_first_car *= 0.80

for n in int_second_car_half:
    time_second_car += n
    if n == 0:
        time_second_car *= 0.80


if time_first_car < time_second_car:
    winner = 'left'
    total_time = time_first_car
    print(f'The winner is {winner} with total time: {time_first_car:.1f}')
else:
    winner = 'right'
    total_time = time_second_car
    print(f'The winner is {winner} with total time: {time_second_car:.1f}')
----------------------------------------------------------------------

# Input: Sequence of numbers representing race times
race_times = list(map(int, input().split()))

# Find the middle index of the sequence
middle_index = len(race_times) // 2

# Initialize total times for both racers
left_total_time = 0
right_total_time = 0

# Calculate total time for the left racer
for i in range(middle_index):
    if race_times[i] == 0:
        left_total_time += race_times[i] * 0.8
    else:
        left_total_time += race_times[i]

# Calculate total time for the right racer
for i in range(middle_index + 1, len(race_times)):
    if race_times[i] == 0:
        right_total_time += race_times[i] * 0.8
    else:
        right_total_time += race_times[i]

# Add the time for the racer at the finish line (middle index)
left_total_time += race_times[middle_index]
right_total_time += race_times[middle_index]

# Determine the winner and print the result
if left_total_time < right_total_time:
    winner = "left"
    total_time = round(left_total_time, 1)
else:
    winner = "right"
    total_time = round(right_total_time, 1)

print(f"The winner is {winner} with total time: {total_time}")
